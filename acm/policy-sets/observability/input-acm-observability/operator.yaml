apiVersion: policy.open-cluster-management.io/v1
kind: ConfigurationPolicy
metadata:
  name: thanos-secret
spec:
  remediationAction: enforce
  severity: high
  object-templates-raw: |
    {{- /* read the bucket data and noobaa endpoint access data */ -}}
    {{- $objBucket := (lookup "objectbucket.io/v1alpha1" "ObjectBucket" "" "obc-openshift-storage-obc-observability") }}
    {{- $awsAccess := (lookup "v1" "Secret" "openshift-storage" "noobaa-admin") }}
    {{- /* create the thanos config file as a template */ -}}
    {{- $thanosConfig := `
    type: s3
    config:
      bucket: %[1]s
      endpoint: %[2]s
      insecure: true
      access_key: %[3]s
      secret_key: %[4]s`
    }}

    {{- /* create the secret using the thanos configuration template created above. */ -}}
    - complianceType: mustonlyhave
      objectDefinition:
        apiVersion: v1
        kind: Secret
        metadata:
          name: thanos-object-storage
          namespace: open-cluster-management-observability
        type: Opaque
        data:
          thanos.yaml: {{ (printf $thanosConfig $objBucket.spec.endpoint.bucketName 
                                                $objBucket.spec.endpoint.bucketHost 
                                                ($awsAccess.data.AWS_ACCESS_KEY_ID | base64dec) 
                                                ($awsAccess.data.AWS_SECRET_ACCESS_KEY | base64dec)
                          ) | base64enc }}
---
apiVersion: v1
data:
  .dockerconfigjson: '{{- if eq (lookup "v1" "Secret" "open-cluster-management" "multiclusterhub-operator-pull-secret").kind "Secret" -}} {{- fromSecret "open-cluster-management" "multiclusterhub-operator-pull-secret" ".dockerconfigjson" -}} {{- else -}} {{- fromSecret "openshift-config" "pull-secret" ".dockerconfigjson" -}} {{- end -}}'
kind: Secret
metadata:
  name: multiclusterhub-operator-pull-secret
  namespace: open-cluster-management-observability
type: kubernetes.io/dockerconfigjson
---
apiVersion: observability.open-cluster-management.io/v1beta2
kind: MultiClusterObservability
metadata:
  name: observability
spec:
  observabilityAddonSpec: {}
  storageConfig:
    metricObjectStorage:
      name: thanos-object-storage
      key: thanos.yaml
---
apiVersion: console.openshift.io/v1
kind: ConsoleLink
metadata:
  name: observability
spec:
  applicationMenu:
    section: Red Hat applications
    imageURL: 'https://upload.wikimedia.org/wikipedia/commons/3/3a/OpenShift-LogoType.svg'
  href: https://{{ (lookup "route.openshift.io/v1" "Route" "open-cluster-management-observability" "grafana").spec.host }}
  location: ApplicationMenu
  text: 'Red Hat Advanced Cluster Management Observability'
